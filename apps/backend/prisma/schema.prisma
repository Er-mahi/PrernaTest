
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Optional for OAuth users
  phone         String?
  role          Role      @default(USER)
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  refreshTokens    RefreshToken[]
  otps             OTP[]
  attempts         Attempt[]
  payments         Payment[]
  entitlements     Entitlement[]
  bookmarks        Bookmark[]
  notifications    Notification[]
  profileSettings  ProfileSettings?

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model ProfileSettings {
  id                  String  @id @default(cuid())
  userId              String  @unique
  theme               String? @default("light")
  language            String? @default("en")
  timezone            String? @default("UTC")
  emailNotifications  Boolean @default(true)
  pushNotifications   Boolean @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile_settings")
}

model OTP {
  id        String   @id @default(cuid())
  userId    String
  code      String
  type      OTPType
  expiresAt DateTime
  verified  Boolean  @default(false)
  attempts  Int      @default(0)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otps")
}

model Notification {
  id        String            @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean           @default(false)
  data      Json?            // Additional data
  createdAt DateTime          @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Test Management Models
model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  slug        String  @unique
  description String?
  icon        String?
  isActive    Boolean @default(true)

  tests Test[]

  @@map("categories")
}

model Test {
  id               String      @id @default(cuid())
  title            String
  description      String?
  duration         Int         // in minutes
  totalMarks       Float
  totalQuestions   Int         @default(0)
  instructions     String?
  status           TestStatus  @default(DRAFT)
  difficulty       Difficulty  @default(MEDIUM)
  isFree           Boolean     @default(false)
  price            Float?
  negativeMarking  Boolean     @default(true)
  negativeMarks    Float       @default(0.25)
  allowReview      Boolean     @default(true)
  randomizeQuestions Boolean   @default(false)
  passingScore     Float?      // Minimum score to pass
  categoryId       String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // Relations
  category  Category? @relation(fields: [categoryId], references: [id])
  sections  Section[]
  attempts  Attempt[]
  tags      TestTag[]

  @@map("tests")
}

model Section {
  id          String  @id @default(cuid())
  testId      String
  title       String
  description String?
  timeLimit   Int?    // section-wise time limit in minutes
  order       Int

  // Relations
  test      Test              @relation(fields: [testId], references: [id], onDelete: Cascade)
  questions SectionQuestion[]

  @@map("sections")
}

model Question {
  id           String      @id @default(cuid())
  content      String      @db.Text
  explanation  String?     @db.Text
  difficulty   Difficulty  @default(MEDIUM)
  questionType QuestionType @default(SINGLE_CHOICE)
  marks        Float       @default(1)
  negativeMarks Float?
  imageUrl     String?     // For questions with images
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  options          Option[]
  sectionQuestions SectionQuestion[]
  attemptAnswers   AttemptAnswer[]
  bookmarks        Bookmark[]
  tags             QuestionTag[]

  @@map("questions")
}

model Option {
  id         String  @id @default(cuid())
  questionId String
  content    String  @db.Text
  isCorrect  Boolean @default(false)
  order      Int
  imageUrl   String? // For options with images

  // Relations
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("options")
}

model SectionQuestion {
  id         String @id @default(cuid())
  sectionId  String
  questionId String
  marks      Float  @default(1)
  order      Int

  // Relations
  section  Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([sectionId, questionId])
  @@map("section_questions")
}

// Test Attempt Models
model Attempt {
  id             String        @id @default(cuid())
  userId         String
  testId         String
  status         AttemptStatus @default(IN_PROGRESS)
  score          Float?
  totalMarks     Float?
  percentage     Float?
  correctAnswers Int?          @default(0)
  wrongAnswers   Int?          @default(0)
  unattempted    Int?          @default(0)
  timeSpent      Int?          // in seconds
  remainingTime  Int?          // in seconds
  startedAt      DateTime      @default(now())
  submittedAt    DateTime?
  
  // Relations
  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  test    Test            @relation(fields: [testId], references: [id], onDelete: Cascade)
  answers AttemptAnswer[]

  @@map("attempts")
}

model AttemptAnswer {
  id                 String    @id @default(cuid())
  attemptId          String
  questionId         String
  selectedOptionId   String?   // single selected option (nullable)
  isMarkedForReview  Boolean   @default(false)
  isCorrect          Boolean?  // Calculated after submission
  marksAwarded       Float?    // Marks awarded for this answer
  timeSpent          Int?      // in seconds
  version            Int       @default(1) // For idempotent autosave
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  attempt  Attempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([attemptId, questionId])
  @@map("attempt_answers")
}



// Bookmark System
model Bookmark {
  id         String   @id @default(cuid())
  userId     String
  questionId String
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
  @@map("bookmarks")
}

// Payment & Subscription Models
model Plan {
  id          String    @id @default(cuid())
  name        String
  description String?
  price       Float
  currency    String    @default("INR")
  duration    Int       // in days
  planType    PlanType  @default(PREMIUM)
  features    String[]  // JSON array of features
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  payments     Payment[]
  entitlements Entitlement[]

  @@map("plans")
}

model Payment {
  id                 String        @id @default(cuid())
  userId             String
  planId             String?       // For plan purchases
  testId             String?       // For individual test purchases
  razorpayOrderId    String?       @unique
  razorpayPaymentId  String?       @unique
  amount             Float
  currency           String        @default("INR")
  status             PaymentStatus @default(CREATED)
  failureReason      String?       // For failed payments
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan         Plan?         @relation(fields: [planId], references: [id])
  entitlement  Entitlement?

  @@map("payments")
}

model Entitlement {
  id        String   @id @default(cuid())
  userId    String
  planId    String
  paymentId String   @unique
  expiresAt DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan    Plan    @relation(fields: [planId], references: [id])
  payment Payment @relation(fields: [paymentId], references: [id])

  @@map("entitlements")
}

// Tagging System
model Tag {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  color       String? @default("#3B82F6")

  tests     TestTag[]
  questions QuestionTag[]

  @@map("tags")
}

model TestTag {
  testId String
  tagId  String

  test Test @relation(fields: [testId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([testId, tagId])
  @@map("test_tags")
}

model QuestionTag {
  questionId String
  tagId      String

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  tag      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([questionId, tagId])
  @@map("question_tags")
}

// Enums
enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum OTPType {
  SIGNUP
  LOGIN
  RESET_PASSWORD
  EMAIL_VERIFICATION
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  TEST_REMINDER
  PAYMENT_SUCCESS
  PAYMENT_FAILED
}

enum TestStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_THE_BLANK
  ESSAY
}

enum AttemptStatus {
  IN_PROGRESS
  SUBMITTED
  AUTO_SUBMITTED
  ABANDONED
}

enum PaymentStatus {
  CREATED
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PlanType {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}